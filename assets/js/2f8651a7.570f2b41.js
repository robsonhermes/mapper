(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[131],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return m},kt:function(){return u}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=s(a),u=r,f=c["".concat(l,".").concat(u)]||c[u]||d[u]||o;return a?n.createElement(f,i(i({ref:t},m),{},{components:a})):n.createElement(f,i({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=c;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5330:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return l},default:function(){return m}});var n=a(2122),r=a(9756),o=(a(7294),a(3905)),i={id:"pojos-metadata",title:"Metadata",sidebar_label:"Metadata"},p={unversionedId:"plugins-system/pojos-metadata",id:"plugins-system/pojos-metadata",isDocsHomePage:!1,title:"Metadata",description:"Different than @automapper/classes, @automapper/pojos provides a different way to keep track of the metadata. That is a method called: createMetadataMap()",source:"@site/docs/plugins-system/pojos-metadata.md",sourceDirName:"plugins-system",slug:"/plugins-system/pojos-metadata",permalink:"/docs/plugins-system/pojos-metadata",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/plugins-system/pojos-metadata.md",version:"current",sidebar_label:"Metadata",frontMatter:{id:"pojos-metadata",title:"Metadata",sidebar_label:"Metadata"},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/plugins-system/introduce-to-pojos"},next:{title:"Introduction",permalink:"/docs/plugins-system/introduce-to-sequelize"}},l=[{value:"<code>createMetadataMap()</code>",id:"createmetadatamap",children:[]},{value:"Storages",id:"storages",children:[{value:"PojosMappingStorage",id:"pojosmappingstorage",children:[]},{value:"PojosMetadataStorage",id:"pojosmetadatastorage",children:[]},{value:"PojosSymbolStorage",id:"pojossymbolstorage",children:[]}]}],s={toc:l};function m(e){var t=e.components,a=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Different than ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/pojos")," provides a different way to keep track of the metadata. That is a method called: ",(0,o.kt)("inlineCode",{parentName:"p"},"createMetadataMap()")),(0,o.kt)("h2",{id:"createmetadatamap"},(0,o.kt)("inlineCode",{parentName:"h2"},"createMetadataMap()")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createMetadataMap()")," is a function that accepts 2 - 3 arguments:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"metaKey"),": In ",(0,o.kt)("inlineCode",{parentName:"li"},"@automapper/classes"),", a class constructor is used as the ",(0,o.kt)("strong",{parentName:"li"},"unique")," ",(0,o.kt)("inlineCode",{parentName:"li"},"metaKey"),". In ",(0,o.kt)("inlineCode",{parentName:"li"},"@automapper/pojos"),", we need to provide a ",(0,o.kt)("strong",{parentName:"li"},"unique")," string. Usually, the string representation of the Interface name would be sufficient"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"metadataOrMetadataMap"),": the second argument can be a ",(0,o.kt)("inlineCode",{parentName:"li"},"MetadataMap")," object or a reference to an existing ",(0,o.kt)("inlineCode",{parentName:"li"},"metaKey"),". This is to help with reusability for models that have similar metadata."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"metadataMap"),": the third argument is an optional ",(0,o.kt)("inlineCode",{parentName:"li"},"MetadataMap")," object. This is to provide additional metadata for a ",(0,o.kt)("inlineCode",{parentName:"li"},"metaKey")," that weren't already available on the existing ",(0,o.kt)("inlineCode",{parentName:"li"},"metaKey")," provided in the second argument. This is also used to negate any unwanted metadata from the second argument ",(0,o.kt)("inlineCode",{parentName:"li"},"metaKey"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createMetadataMap } from '@automapper/pojos';\n\nexport interface SimpleBar {\n  bar: string;\n}\n\nexport interface SimpleBarVm {\n  bar: string;\n}\n\nexport interface SimpleFoo {\n  foo: string;\n  bar: SimpleBar;\n  fooBar: number;\n}\n\nexport interface SimpleFooVm {\n  foo: string;\n  bar: SimpleBarVm;\n  fooBar: number;\n}\n\nexport function createSimpleFooBarMetadata() {\n  // create a metadataMap for SimpleBar\n  createMetadataMap<SimpleBar>('SimpleBar', { bar: String });\n\n  // create a metadataMap for SimpleBarVm. We reuse \"SimpleBar\" metadata\n  createMetadataMap<SimpleBarVm>('SimpleBarVm', 'SimpleBar');\n\n  // create a metadataMap for SimpleFoo\n  createMetadataMap<SimpleFoo>('SimpleFoo', {\n    foo: String,\n    bar: 'SimpleBar',\n    fooBar: Number,\n  });\n\n  // create a metadataMap for SimpleFooVm\n  // We reuse foo and fooBar from SimpleFoo and override bar\n  createMetadataMap<SimpleFooVm>('SimpleFooVm', 'SimpleFoo', {\n    bar: 'SimpleBarVm',\n  });\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createMetadataMap()")," has to be called before invoking ",(0,o.kt)("inlineCode",{parentName:"p"},"mapper.createMap()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"mapper.addProfile()")),(0,o.kt)("h2",{id:"storages"},"Storages"),(0,o.kt)("p",null,"Same as ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/pojos")," has a couple of storages to handle storing the metadata"),(0,o.kt)("h3",{id:"pojosmappingstorage"},"PojosMappingStorage"),(0,o.kt)("p",null,"This is to store the ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapping")," of all the models used within the ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapper")),(0,o.kt)("h3",{id:"pojosmetadatastorage"},"PojosMetadataStorage"),(0,o.kt)("p",null,"This is to store the metadata of all the models used within the ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapper")),(0,o.kt)("h3",{id:"pojossymbolstorage"},"PojosSymbolStorage"),(0,o.kt)("p",null,"This is to store all the metadata for each symbol (",(0,o.kt)("inlineCode",{parentName:"p"},"metaKey"),")"))}m.isMDXComponent=!0}}]);