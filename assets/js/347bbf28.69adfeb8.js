(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[68],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=l(t),m=i,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return t?a.createElement(k,o(o({ref:n},u),{},{components:t})):a.createElement(k,o({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var l=2;l<r;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7896:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return s},default:function(){return u}});var a=t(2122),i=t(9756),r=(t(7294),t(3905)),o={id:"create-mapper",title:"createMapper",sidebar_label:"createMapper"},p={unversionedId:"api/create-mapper",id:"api/create-mapper",isDocsHomePage:!1,title:"createMapper",description:"createMapper() is used to create a Mapper object with a CreateMapperOptions.",source:"@site/docs/api/create-mapper.md",sourceDirName:"api",slug:"/api/create-mapper",permalink:"/docs/api/create-mapper",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/api/create-mapper.md",version:"current",sidebar_label:"createMapper",frontMatter:{id:"create-mapper",title:"createMapper",sidebar_label:"createMapper"},sidebar:"api"},s=[{value:"<code>Mapper</code>",id:"mapper",children:[]},{value:"<code>CreateMapperOptions</code>",id:"createmapperoptions",children:[{value:"Required fields",id:"required-fields",children:[]},{value:"Optional fields",id:"optional-fields",children:[]}]},{value:"<code>MapPluginInitializer</code>",id:"mapplugininitializer",children:[]},{value:"<code>MapPlugin</code>",id:"mapplugin",children:[]}],l={toc:s};function u(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"createMapper()")," is used to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Mapper")," object with a ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateMapperOptions"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"createMapper(options: CreateMapperOptions): Mapper;\n")),(0,r.kt)("h2",{id:"mapper"},(0,r.kt)("inlineCode",{parentName:"h2"},"Mapper")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export interface Mapper<TKey = unknown> {\n  name: string;\n\n  // +2 overloads\n  createMap<\n    TSource extends Dictionary<TSource>,\n    TDestination extends Dictionary<TDestination>\n  >(\n    source: TKey,\n    destination: TKey,\n    options?: CreateMapOptions\n  ): CreateMapFluentFunction<TSource, TDestination>;\n\n  // +2 overloads\n  getMapping<TKey = unknown>(source: TKey, destination: TKey): Mapping;\n\n  addProfile(profile): Mapper;\n\n  // +1 overload\n  map<\n    TSource extends Dictionary<TSource> = unknown,\n    TDestination extends Dictionary<TDestination> = unknown\n  >(\n    sourceObj: TSource,\n    destination: new (...args: unknown[]) => TDestination,\n    source: new (...args: unknown[]) => TSource,\n    options?: MapOptions<TSource, TDestination>\n  ): TDestination;\n\n  // +1 overload\n  mapAsync<\n    TSource extends Dictionary<TSource> = unknown,\n    TDestination extends Dictionary<TDestination> = unknown\n  >(\n    sourceObj: TSource,\n    destination: new (...args: unknown[]) => TDestination,\n    source: new (...args: unknown[]) => TSource,\n    options?: MapOptions<TSource, TDestination>\n  ): Promise<TDestination>;\n\n  // +1 overload\n  mapArray<\n    TSource extends Dictionary<TSource> = unknown,\n    TDestination extends Dictionary<TDestination> = unknown\n  >(\n    sourceArray: TSource[],\n    destination: new (...args: unknown[]) => TDestination,\n    source: new (...args: unknown[]) => TSource,\n    options?: MapOptions<TSource[], TDestination[]>\n  ): TDestination[];\n\n  // +1 overload\n  mapArrayAsync<\n    TSource extends Dictionary<TSource> = unknown,\n    TDestination extends Dictionary<TDestination> = unknown\n  >(\n    sourceArray: TSource[],\n    destination: new (...args: unknown[]) => TDestination,\n    source: new (...args: unknown[]) => TSource,\n    options?: MapOptions<TSource[], TDestination[]>\n  ): Promise<TDestination[]>;\n\n  dispose(): void;\n}\n")),(0,r.kt)("h2",{id:"createmapperoptions"},(0,r.kt)("inlineCode",{parentName:"h2"},"CreateMapperOptions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export interface CreateMapperOptions<TKey = unknown> {\n  name: string;\n  pluginInitializer: MapPluginInitializer<TKey>;\n  namingConventions?:\n    | NamingConvention\n    | {\n        source: NamingConvention;\n        destination: NamingConvention;\n      };\n  errorHandler?: ErrorHandler;\n}\n")),(0,r.kt)("h3",{id:"required-fields"},"Required fields"),(0,r.kt)("h4",{id:"name"},(0,r.kt)("inlineCode",{parentName:"h4"},"name")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"string"))),(0,r.kt)("p",null,"Name of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Mapper")),(0,r.kt)("h4",{id:"plugininitializer"},(0,r.kt)("inlineCode",{parentName:"h4"},"pluginInitializer")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"MapPluginInitializer")," (See ",(0,r.kt)("a",{parentName:"li",href:"#mapplugininitializer"},(0,r.kt)("inlineCode",{parentName:"a"},"MapPluginInitializer")),")")),(0,r.kt)("p",null,"Plugin that the ",(0,r.kt)("inlineCode",{parentName:"p"},"Mapper")," will be using"),(0,r.kt)("h3",{id:"optional-fields"},"Optional fields"),(0,r.kt)("h4",{id:"namingconventions"},(0,r.kt)("inlineCode",{parentName:"h4"},"namingConventions")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"NamingConvention | { source: NamingConvention, destination: NamingConvention }"))),(0,r.kt)("p",null,"Global naming conventions for all the ",(0,r.kt)("inlineCode",{parentName:"p"},"Mapping")," in this ",(0,r.kt)("inlineCode",{parentName:"p"},"Mapper")),(0,r.kt)("h4",{id:"errorhandler"},(0,r.kt)("inlineCode",{parentName:"h4"},"errorHandler")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"ErrorHandler")," (See ",(0,r.kt)("a",{parentName:"li",href:"/docs/misc/error-handler"},"ErrorHandler"),")")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ErrorHandler")," that this ",(0,r.kt)("inlineCode",{parentName:"p"},"Mapper")," uses"),(0,r.kt)("h2",{id:"mapplugininitializer"},(0,r.kt)("inlineCode",{parentName:"h2"},"MapPluginInitializer")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export interface MapPluginInitializer<TKey = unknown> {\n  (errorHandler: ErrorHandler): MapPlugin<TKey>;\n}\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"#mapplugin"},(0,r.kt)("inlineCode",{parentName:"a"},"MapPlugin"))),(0,r.kt)("h2",{id:"mapplugin"},(0,r.kt)("inlineCode",{parentName:"h2"},"MapPlugin")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * How a plugin should provide\n */\nexport interface MapPlugin<TKey = unknown> {\n  /**\n   * Instruction on how a plugin should initialize a mapping for a pair of Source <> Destination\n   * This method will make use of the plugin's internal storages to store information for this pair.\n   *\n   * @param source - a key to be used to identify the information about a particular Source\n   * @param destination - a key to be used to identify the information about a particular Destination\n   * @param options {CreateMapOptions} - options for when initialize a mapping (which is globally applied to this pair of Source <> Destination)\n   */\n  initializeMapping(\n    source: TKey,\n    destination: TKey,\n    options?: CreateMapOptions\n  ): Mapping;\n\n  /**\n   * Get the Mapping for a pair of Source <> Destination\n   *\n   * @param source - a key to be used to identify the information about a particular Source\n   * @param destination - a key to be used to identify the information about a particular Destination\n   */\n  getMapping(source: TKey, destination: TKey): Mapping;\n\n  /**\n   * An optional pre-map function to prepare the source and destination before map\n   *\n   * @param source - a key to be used to identify the information about a particular Source\n   * @param destination - a key to be used to identify the information about a particular Destination\n   * @param sourceObj - a plain object that takes the shape of the source\n   * @param destinationObj - a plain object that takes the shape of the destination\n   */\n  preMap?<\n    TSource extends Dictionary<TSource> = unknown,\n    TDestination extends Dictionary<TDestination> = unknown\n  >(\n    source: TKey,\n    destination: TKey,\n    sourceObj?: TSource,\n    destinationObj?: TDestination\n  ): [sourceInstance: TSource, destinationInstance: TDestination];\n\n  /**\n   * Optional method to clean up the plugin's storages\n   */\n  dispose?(): void;\n}\n")))}u.isMDXComponent=!0}}]);