(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[170],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=u(n),f=o,d=s["".concat(c,".").concat(f)]||s[f]||m[f]||a;return n?r.createElement(d,i(i({ref:t},l),{},{components:n})):r.createElement(d,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=s;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},8161:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return c},default:function(){return l}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i={id:"from-value",title:"FromValue",sidebar_label:"FromValue"},p={unversionedId:"mapping-configuration/from-value",id:"mapping-configuration/from-value",isDocsHomePage:!1,title:"FromValue",description:"fromValue() accepts a raw value to map to the member on Destination. If you pass in an object, this object will be mapped as-is without any consideration for a nested Mapping.",source:"@site/docs/mapping-configuration/from-value.md",sourceDirName:"mapping-configuration",slug:"/mapping-configuration/from-value",permalink:"/docs/mapping-configuration/from-value",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/mapping-configuration/from-value.md",version:"current",sidebar_label:"FromValue",frontMatter:{id:"from-value",title:"FromValue",sidebar_label:"FromValue"},sidebar:"docs",previous:{title:"Condition",permalink:"/docs/mapping-configuration/condition"},next:{title:"MapWith",permalink:"/docs/mapping-configuration/map-with"}},c=[],u={toc:c};function l(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"fromValue()")," accepts a raw value to map to the member on ",(0,a.kt)("strong",{parentName:"p"},"Destination"),". If you pass in an object, this object will be mapped as-is without any consideration for a nested ",(0,a.kt)("inlineCode",{parentName:"p"},"Mapping"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { fromValue } from '@automapper/core';\n\nmapper\n  .createMap(User, UserDto)\n  .forMember(\n    (destination) => destination.fullName,\n    fromValue('some raw value')\n  );\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"fromValue()")," will set the ",(0,a.kt)("inlineCode",{parentName:"p"},"TransformationType")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"TransformationType.FromValue")))}l.isMDXComponent=!0}}]);