(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[3],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return d}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=o.createContext({}),c=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},l=function(e){var n=c(e.components);return o.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||a;return t?o.createElement(f,p(p({ref:n},l),{},{components:t})):o.createElement(f,p({ref:n},l))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,p=new Array(a);p[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,p[1]=s;for(var c=2;c<a;c++)p[c]=t[c];return o.createElement.apply(null,p)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1471:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return p},metadata:function(){return s},toc:function(){return i},default:function(){return l}});var o=t(2122),r=t(9756),a=(t(7294),t(3905)),p={id:"classes-mapped-types",title:"Mapped Types",sidebar_label:"Mapped Types"},s={unversionedId:"plugins-system/classes-mapped-types",id:"plugins-system/classes-mapped-types",isDocsHomePage:!1,title:"@automapper/classes/mapped-types",description:"@automapper/classes/mapped-types is part of the public API of @automapper/classes.",source:"@site/docs/plugins-system/classes-mapped-types.md",sourceDirName:"plugins-system",slug:"/plugins-system/classes-mapped-types",permalink:"/docs/plugins-system/classes-mapped-types",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/plugins-system/classes-mapped-types.md",version:"current",sidebar_label:"Mapped Types",frontMatter:{id:"classes-mapped-types",title:"Mapped Types",sidebar_label:"Mapped Types"},sidebar:"docs",previous:{title:"Transformer Plugin",permalink:"/docs/plugins-system/classes-transformer-plugin"},next:{title:"Introduction",permalink:"/docs/plugins-system/introduce-to-pojos"}},i=[{value:"Usage",id:"usage",children:[{value:"<code>MapperPickType</code>",id:"mapperpicktype",children:[]},{value:"<code>MapperOmitType</code>",id:"mapperomittype",children:[]},{value:"<code>MapperIntersectionType</code>",id:"mapperintersectiontype",children:[]}]}],c={toc:i};function l(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@automapper/classes/mapped-types")," is part of the public API of ",(0,a.kt)("inlineCode",{parentName:"p"},"@automapper/classes"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@automapper/classes/mapped-types")," is inspired by ",(0,a.kt)("inlineCode",{parentName:"p"},"@nestjs/mapped-types")," to provide mixins to reduce some boilerplate code."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"All ",(0,a.kt)("inlineCode",{parentName:"p"},"Mapper*Type")," are exported from ",(0,a.kt)("inlineCode",{parentName:"p"},"@automapper/classes/mapped-types")),(0,a.kt)("h3",{id:"mapperpicktype"},(0,a.kt)("inlineCode",{parentName:"h3"},"MapperPickType")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MapperPickType")," accepts an original class, and an array of property keys to ",(0,a.kt)("strong",{parentName:"p"},"pick")," from the original class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  @AutoMap()\n  foo: string;\n  @AutoMap()\n  bar: number;\n  @AutoMap()\n  baz: boolean;\n}\n\nclass PickFooBar extends MapperPickType(Foo, ['foo', 'bar']) {}\n\nmapper.createMap(Foo, PickFooBar);\n\nconst foo = new Foo();\nfoo.foo = 'foo';\nfoo.bar = 123;\nfoo.baz = true;\n\nconst pickedFooBar = mapper.map(foo, PickFooBar, Foo);\nconsole.log(pickedFooBar);\n/**\n * PickFooBar { foo: 'foo', bar: 123 }\n * only foo and bar have been picked\n */\n")),(0,a.kt)("h3",{id:"mapperomittype"},(0,a.kt)("inlineCode",{parentName:"h3"},"MapperOmitType")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MapperOmitType")," accepts an original class, and an array of property keys to ",(0,a.kt)("strong",{parentName:"p"},"omit")," from the original class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  @AutoMap()\n  foo: string;\n  @AutoMap()\n  bar: number;\n  @AutoMap()\n  baz: boolean;\n}\n\nclass OmitFooBar extends MapperOmitType(Foo, ['foo', 'bar']) {}\n\nmapper.createMap(Foo, OmitFooBar);\n\nconst foo = new Foo();\nfoo.foo = 'foo';\nfoo.bar = 123;\nfoo.baz = true;\n\nconst omittedFooBar = mapper.map(foo, OmitFooBar, Foo);\nconsole.log(omittedFooBar);\n/**\n * OmitFooBar { baz: true }\n * foo and bar have been omitted\n */\n")),(0,a.kt)("h3",{id:"mapperintersectiontype"},(0,a.kt)("inlineCode",{parentName:"h3"},"MapperIntersectionType")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MapperIntersectionType")," accepts two parent classes to receive all properties from both classes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  @AutoMap()\n  foo: string;\n}\n\nclass Bar {\n  @AutoMap()\n  bar: number;\n}\n\nclass IntersectFooBar extends MapperIntersectionType(Foo, Bar) {}\n\nmapper.createMap(IntersectFooBar, Foo);\nmapper.createMap(IntersectFooBar, Bar);\n\nconst intersect = new IntersectFooBar();\nintersect.foo = 'foo';\nintersect.bar = 123;\n\nconst foo = mapper.map(intersect, Foo, IntersectFooBar);\nconsole.log(foo);\n/**\n * Foo { foo: 'foo' }\n */\n\nconst bar = mapper.map(intersect, Bar, IntersectFooBar);\nconsole.log(bar);\n/**\n * Bar { bar: 123 }\n */\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"AutoMapper does not have the concept of mapping multiple ",(0,a.kt)("inlineCode",{parentName:"p"},"Sources")," to a ",(0,a.kt)("inlineCode",{parentName:"p"},"Destination"),". Hence, please be cautious when to utilize ",(0,a.kt)("inlineCode",{parentName:"p"},"MapperIntersectionType"))))}l.isMDXComponent=!0}}]);