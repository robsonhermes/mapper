(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[927],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=l(r),d=a,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return r?n.createElement(f,o(o({ref:t},s),{},{components:r})):n.createElement(f,o({ref:t},s))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9870:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c},default:function(){return s}});var n=r(2122),a=r(9756),i=(r(7294),r(3905)),o={id:"architecture",title:"Architecture",sidebar_label:"Architecture"},p={unversionedId:"architecture",id:"architecture",isDocsHomePage:!1,title:"Architecture",description:"Monorepo with Nx",source:"@site/docs/architecture.md",sourceDirName:".",slug:"/architecture",permalink:"/docs/architecture",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/architecture.md",version:"current",sidebar_label:"Architecture",frontMatter:{id:"architecture",title:"Architecture",sidebar_label:"Architecture"},sidebar:"docs",previous:{title:"Alternatives",permalink:"/docs/introduction/alternatives"},next:{title:"Installation",permalink:"/docs/getting-started/installation"}},c=[{value:"Monorepo with Nx",id:"monorepo-with-nx",children:[]},{value:"Semantic Versioning",id:"semantic-versioning",children:[]},{value:"Plugin-based approach",id:"plugin-based-approach",children:[]}],l={toc:c};function s(e){var t=e.components,r=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"monorepo-with-nx"},"Monorepo with Nx"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/*")," is a monorepo with multiple packages that are managed by ",(0,i.kt)("a",{parentName:"p",href:"https://nx.dev"},"Nx DevTools"),". This is to bring a sense of consistency of developing, building, and testing all the separate packages."),(0,i.kt)("h2",{id:"semantic-versioning"},"Semantic Versioning"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/*")," will follow ",(0,i.kt)("a",{parentName:"p",href:"https://semver.org/"},"SemVer")," specification for releasing fixes and features. When a package is bumped, the other packages will also be bumped. A major version might or might not be accompanied by a ",(0,i.kt)("inlineCode",{parentName:"p"},"beta")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"rc")," release."),(0,i.kt)("h2",{id:"plugin-based-approach"},"Plugin-based approach"),(0,i.kt)("p",null,"Different from the previous version, ",(0,i.kt)("inlineCode",{parentName:"p"},"@nartc/automapper"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/core")," is reworked to support for plugin-based system. The plugin-based system allows me to separate the concerns of different packages away from ",(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/core"),". Ultimately, this brings a better developer experience to me (and hopefully, to future contributors) since we can stay focus on one particular area instead of the whole library."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/core")," will handle the mapping configuration and the mapping operations. Core also provides utilities to help build Plugins."),(0,i.kt)("p",null,"Plugins will be responsible for Metadata Storing mechanism. ",(0,i.kt)("inlineCode",{parentName:"p"},"@automapper")," works based on metadata of a certain pair of Objects which means this responsibility can now be developed in separation from the Core itself. This allows for customization to meet more use-cases. ",(0,i.kt)("inlineCode",{parentName:"p"},"@automapper")," provides two official plugins: ",(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/classes")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/pojos")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@automapper/classes")," works with TS/ES6 Class which is exactly like the previous ",(0,i.kt)("inlineCode",{parentName:"li"},"@nartc/automapper")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@automapper/pojos")," helps with Interfaces/Types + POJOs.")))}s.isMDXComponent=!0}}]);