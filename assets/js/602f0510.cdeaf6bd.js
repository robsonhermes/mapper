(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[83],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=m(n),c=r,k=u["".concat(l,".").concat(c)]||u[c]||s[c]||i;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var m=2;m<i;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2009:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return l},default:function(){return d}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o={id:"fundamentals",title:"Fundamentals",sidebar_label:"Fundamentals"},p={unversionedId:"fundamentals",id:"fundamentals",isDocsHomePage:!1,title:"Fundamentals",description:"We have looked at the Basic example but in order to get into some more details of AutoMapper, we need to be aware of some of the definitions used in @automapper/*",source:"@site/docs/fundamentals.md",sourceDirName:".",slug:"/fundamentals",permalink:"/docs/fundamentals",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/fundamentals.md",version:"current",sidebar_label:"Fundamentals",frontMatter:{id:"fundamentals",title:"Fundamentals",sidebar_label:"Fundamentals"},sidebar:"docs",previous:{title:"Introduce to Profile",permalink:"/docs/getting-started/introduce-to-profile"},next:{title:"Auto in AutoMapper",permalink:"/docs/mapping-configuration/auto"}},l=[{value:"Mapper",id:"mapper",children:[]},{value:"Mapping",id:"mapping",children:[]},{value:"MappingProperty",id:"mappingproperty",children:[]},{value:"MappingTransformation",id:"mappingtransformation",children:[]},{value:"TransformationType",id:"transformationtype",children:[]},{value:"NamingConvention",id:"namingconvention",children:[]}],m={toc:l};function d(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We have looked at the ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting-started/introduce-to-automapper"},"Basic example")," but in order to get into some more details of AutoMapper, we need to be aware of some of the definitions used in ",(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/*")),(0,i.kt)("h2",{id:"mapper"},"Mapper"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Mapper")," is the first-class citizen in ",(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/*"),". All ",(0,i.kt)("a",{parentName:"p",href:"/docs/mapping-configuration/auto"},"Mapping Configuration")," and Map Operations are handled by ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapper"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Mapper")," is created by invoking ",(0,i.kt)("inlineCode",{parentName:"p"},"createMapper()")," along with a ",(0,i.kt)("a",{parentName:"p",href:"/docs/plugins-system/introduce-to-plugins"},"Plugin")),(0,i.kt)("h2",{id:"mapping"},"Mapping"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Mapping")," is a contract between a ",(0,i.kt)("strong",{parentName:"p"},"Source")," model and a ",(0,i.kt)("strong",{parentName:"p"},"Destination")," model. In our ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting-started/introduce-to-automapper"},"Basic example"),", our ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," is ",(0,i.kt)("strong",{parentName:"p"},"Source")," while ",(0,i.kt)("inlineCode",{parentName:"p"},"UserDto")," is ",(0,i.kt)("strong",{parentName:"p"},"Destination"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Mapping")," contains metadata as well as some configurations about the ",(0,i.kt)("strong",{parentName:"p"},"Source")," and ",(0,i.kt)("strong",{parentName:"p"},"Destination"),": models, naming conventions, map callbacks, ",(0,i.kt)("a",{parentName:"p",href:"#mappingproperty"},"MappingProperty")," etc... We know what ",(0,i.kt)("strong",{parentName:"p"},"models")," mean. We will explore the other definitions in other sections."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Mapping")," is created by invoking ",(0,i.kt)("inlineCode",{parentName:"p"},"mapper.createMap()"),". Within a ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapper"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapping")," is ",(0,i.kt)("strong",{parentName:"p"},"uni-directionally unique"),". In other words, we can have both ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapping<Source, Destination>")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapping<Destination, Source>"),"."),(0,i.kt)("h2",{id:"mappingproperty"},"MappingProperty"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MappingProperty")," is a record of information about a particular member on the ",(0,i.kt)("strong",{parentName:"p"},"Destination")," along with its ",(0,i.kt)("a",{parentName:"p",href:"#mappingtransformation"},"MappingTransformation"),"."),(0,i.kt)("h2",{id:"mappingtransformation"},"MappingTransformation"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MappingTransformation")," is an instruction of how a ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapper")," should map a particular member on the ",(0,i.kt)("strong",{parentName:"p"},"Destination"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"MappingTransformation")," operates based on different types of ",(0,i.kt)("a",{parentName:"p",href:"#transformationtype"},"TransformationType"),"."),(0,i.kt)("h2",{id:"transformationtype"},"TransformationType"),(0,i.kt)("p",null,"There are currently 9 ",(0,i.kt)("inlineCode",{parentName:"p"},"TransformationType")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/core"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/core")," exposes a collection of ",(0,i.kt)("inlineCode",{parentName:"p"},"MemberMapFunction"),". Each function will return an appropriate ",(0,i.kt)("inlineCode",{parentName:"p"},"TransformationType"),"."),(0,i.kt)("p",null,"These functions are all separate and pure-functions which allows for ",(0,i.kt)("strong",{parentName:"p"},"Tree-shaking"),"-enabled bundler to optimize the bundle-size of the consumers."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"MemberMapFunction"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Ignore"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ignore()")),(0,i.kt)("td",{parentName:"tr",align:null},"Ignore a member on the ",(0,i.kt)("strong",{parentName:"td"},"Destination"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MapFrom"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"mapFrom()")),(0,i.kt)("td",{parentName:"tr",align:null},"Customized instruction for a member")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Condition"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"condition()")),(0,i.kt)("td",{parentName:"tr",align:null},"If the member on the ",(0,i.kt)("strong",{parentName:"td"},"Destination")," matches with another member on the ",(0,i.kt)("strong",{parentName:"td"},"Source"),", this will conditionally map the member on the ",(0,i.kt)("strong",{parentName:"td"},"Source")," to ",(0,i.kt)("strong",{parentName:"td"},"Destination")," if some predicate is evaluated to ",(0,i.kt)("strong",{parentName:"td"},"truthy"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"FromValue"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fromValue()")),(0,i.kt)("td",{parentName:"tr",align:null},"Map a raw value to the member")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MapWith"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"mapWith()")),(0,i.kt)("td",{parentName:"tr",align:null},"In some cases where nested models do not work automatically, this is to specify the nested ",(0,i.kt)("strong",{parentName:"td"},"Destination")," of the member as well as the nested ",(0,i.kt)("strong",{parentName:"td"},"Source"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ConvertUsing"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"convertUsing()")),(0,i.kt)("td",{parentName:"tr",align:null},"Map a member using ",(0,i.kt)("a",{parentName:"td",href:"/docs/mapping-configuration/convert-using"},"Converters"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"NullSubstitution"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"nullSubstitution()")),(0,i.kt)("td",{parentName:"tr",align:null},"If the member on ",(0,i.kt)("strong",{parentName:"td"},"Source")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"null"),", this will substitute the ",(0,i.kt)("inlineCode",{parentName:"td"},"null")," value with a different value for that member on ",(0,i.kt)("strong",{parentName:"td"},"Destination"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MapDefer"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"mapDefer()")),(0,i.kt)("td",{parentName:"tr",align:null},"This can be used to ",(0,i.kt)("em",{parentName:"td"},"defer")," a ",(0,i.kt)("inlineCode",{parentName:"td"},"TransformationType")," with the ",(0,i.kt)("strong",{parentName:"td"},"Source"),". For example, if ",(0,i.kt)("strong",{parentName:"td"},"Source")," has data A, we want ",(0,i.kt)("inlineCode",{parentName:"td"},"MapFrom")," but if ",(0,i.kt)("strong",{parentName:"td"},"Source")," has B, we want to ",(0,i.kt)("inlineCode",{parentName:"td"},"Ignore"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MapWithArguments"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"mapWithArguments()")),(0,i.kt)("td",{parentName:"tr",align:null},"This can be used to ",(0,i.kt)("em",{parentName:"td"},"map")," with extra arguments where the arguments come in at runtime when ",(0,i.kt)("inlineCode",{parentName:"td"},"map()")," is invoked")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MapInitialize"),(0,i.kt)("td",{parentName:"tr",align:null},"internal ",(0,i.kt)("inlineCode",{parentName:"td"},"mapInitialize()")),(0,i.kt)("td",{parentName:"tr",align:null},"This is used ",(0,i.kt)("strong",{parentName:"td"},"internally")," to initialize the ",(0,i.kt)("inlineCode",{parentName:"td"},"MappingProperty")," with the ",(0,i.kt)("strong",{parentName:"td"},"Destination")," metadata")))),(0,i.kt)("h2",{id:"namingconvention"},"NamingConvention"),(0,i.kt)("p",null,"As the name suggests, ",(0,i.kt)("inlineCode",{parentName:"p"},"NamingConvention")," allows for ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapper")," to map models with different casing. ",(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/core")," provides 3 conventions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CamelCaseNamingConvention")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PascalCaseNamingConvention")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SnakeCaseNamingConvention"))),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/*")," does not set a default convention. ",(0,i.kt)("a",{parentName:"p",href:"/docs/mapping-configuration/auto#flattening"},"Flattening")," can only be applied when ",(0,i.kt)("inlineCode",{parentName:"p"},"NamingConvention")," is set on the models, even if they have the same casing."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"NamingConvention")," can be applied to a ",(0,i.kt)("strong",{parentName:"p"},"unique")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapping")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"mapper.createMap()"),", or can be applied globally to all ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapping")," within a single ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapper")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"createMapper()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const mapper = createMapper({\n  name,\n  pluginInitializer,\n  namingConventions: new CamelCaseNamingConvention(), // global\n});\n\n// or\n\nmapper.createMap(User, UserDto, {\n  namingConventions: new CamelCaseNamingConvention(),\n});\n")))}d.isMDXComponent=!0}}]);