(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[704],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),s=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),l=s(n),g=a,f=l["".concat(m,".").concat(g)]||l[g]||c[g]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=l;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},744:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return m},default:function(){return u}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i={id:"map-with-arguments",title:"MapWithArguments",sidebar_label:"MapWithArguments"},p={unversionedId:"mapping-configuration/map-with-arguments",id:"mapping-configuration/map-with-arguments",isDocsHomePage:!1,title:"MapWithArguments",description:"Sometimes the consumers might need to pass in additional arguments to the map operations at runtime when invoking mapper.map(), mapWithArguments() is the map function that allows this behavior.",source:"@site/docs/mapping-configuration/map-with-arguments.md",sourceDirName:"mapping-configuration",slug:"/mapping-configuration/map-with-arguments",permalink:"/docs/mapping-configuration/map-with-arguments",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/mapping-configuration/map-with-arguments.md",version:"current",sidebar_label:"MapWithArguments",frontMatter:{id:"map-with-arguments",title:"MapWithArguments",sidebar_label:"MapWithArguments"},sidebar:"docs",previous:{title:"Ignore",permalink:"/docs/mapping-configuration/ignore"},next:{title:"MapDefer",permalink:"/docs/mapping-configuration/map-defer"}},m=[{value:"Value Resolver",id:"value-resolver",children:[]}],s={toc:m};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Sometimes the consumers might need to pass in additional arguments to the map operations at runtime when invoking ",(0,o.kt)("inlineCode",{parentName:"p"},"mapper.map()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"mapWithArguments()")," is the map function that allows this behavior."),(0,o.kt)("p",null,"All ",(0,o.kt)("inlineCode",{parentName:"p"},"map()")," operations (eg: ",(0,o.kt)("inlineCode",{parentName:"p"},"mapper.map()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"mapper.mapArray()")," ...) accepts an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"MapOptions")," in which there is a property called ",(0,o.kt)("inlineCode",{parentName:"p"},"extraArguments")," that the consumers can use to pass in additional arguments for ",(0,o.kt)("inlineCode",{parentName:"p"},"mapWithArguments()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { mapWithArguments } from '@automapper/core';\n\nmapper.createMap(User, UserDto).forMember(\n  (destination) => destination.foo,\n  mapWithArguments((source, { argument1 }) => getFoo(source, argument1))\n);\n\n// when we want to run map from a User to a UserDto\nconst dto = mapper.map(someUser, UserDto, User, {\n  extraArguments: { argument1: someValue },\n});\n")),(0,o.kt)("h2",{id:"value-resolver"},"Value Resolver"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/mapping-configuration/map-from"},"Resolver")," can also be used with ",(0,o.kt)("inlineCode",{parentName:"p"},"mapWithArguments")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export const taxResolver: Resolver<Item, { percentage: number }, number> = {\n  resolve(source, { percentage }) {\n    return source.price * percentage;\n  },\n};\n\nmapper\n  .createMap(Item, ItemDto)\n  .forMember((destination) => destination.tax, mapWithArguments(taxResolver));\n\nmapper.map(item, ItemDto, Item, { extraArguments: { percentage: 0.5 } };\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mapWithArguments()")," will set the ",(0,o.kt)("inlineCode",{parentName:"p"},"TransformationType")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"TransformationType.MapWithArguments")))}u.isMDXComponent=!0}}]);