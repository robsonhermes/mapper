(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[776],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(t),d=r,k=c["".concat(l,".").concat(d)]||c[d]||m[d]||o;return t?a.createElement(k,p(p({ref:n},u),{},{components:t})):a.createElement(k,p({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,p=new Array(o);p[0]=c;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var s=2;s<o;s++)p[s]=t[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},1172:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return p},metadata:function(){return i},toc:function(){return l},default:function(){return u}});var a=t(2122),r=t(9756),o=(t(7294),t(3905)),p={id:"nestjs",title:"NestJS Integration",sidebar_label:"NestJS"},i={unversionedId:"nestjs",id:"nestjs",isDocsHomePage:!1,title:"NestJS Integration",description:"@automapper/nestjs is the official integration for NestJS.",source:"@site/docs/nestjs.md",sourceDirName:".",slug:"/nestjs",permalink:"/docs/nestjs",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/nestjs.md",version:"current",sidebar_label:"NestJS",frontMatter:{id:"nestjs",title:"NestJS Integration",sidebar_label:"NestJS"},sidebar:"docs",previous:{title:"Extend plugin",permalink:"/docs/plugins-system/extend-plugin"},next:{title:"Migrations",permalink:"/docs/migrations"}},l=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"<code>singular</code>",id:"singular",children:[]}]},{value:"Profile",id:"profile",children:[]},{value:"<code>MapInterceptor</code>",id:"mapinterceptor",children:[]},{value:"<code>MapPipe</code>",id:"mappipe",children:[]}],s={toc:l};function u(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/nestjs")," is the official integration for ",(0,o.kt)("a",{parentName:"p",href:"https://nestjs.com"},"NestJS"),"."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @automapper/nestjs\n# or with yarn\nyarn add @automapper/nestjs\n")),(0,o.kt)("h4",{id:"peerdependencies"},(0,o.kt)("inlineCode",{parentName:"h4"},"peerDependencies")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/nestjs")," depends on ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/core")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/types"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @automapper/core\nnpm i -D @automapper/types\n# or with yarn\nyarn add @automapper/core\nyarn add -D @automapper/types\n")),(0,o.kt)("h4",{id:"plugin"},"Plugin"),(0,o.kt)("p",null,"Recommendation is to use ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes")," in a NestJS application."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Import ",(0,o.kt)("inlineCode",{parentName:"li"},"AutomapperModule.forRoot()")," in ",(0,o.kt)("inlineCode",{parentName:"li"},"AppModule"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Module({\n  imports: [\n    AutomapperModule.forRoot({\n      options: [{ name: 'blah', pluginInitializer: classes }],\n      singular: true,\n    }),\n  ],\n})\nexport class AppModule {}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AutomapperModule.forRoot()")," accepts a ",(0,o.kt)("inlineCode",{parentName:"li"},"AutomapperModuleOptions")," which has the following interface:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * Options for AutomapperModule.forRoot()\n */\nexport interface AutomapperModuleOptions {\n  /**\n   * An array of CreateMapperOptions to create multiple mappers\n   */\n  options: CreateMapperOptions[];\n  /**\n   * Global ErrorHandler to pass to all mappers\n   */\n  globalErrorHandler?: ErrorHandler;\n  /**\n   * Global NamingConventions to pass to all mappers\n   */\n  globalNamingConventions?: {\n    source: NamingConvention;\n    destination: NamingConvention;\n  };\n  /**\n   * Set to true if you want to use the default Mapper token for when only one mapper is setup with forRoot\n   * @default false\n   */\n  singular?: boolean;\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Pass in multiple ",(0,o.kt)("inlineCode",{parentName:"li"},"CreateMapperOptions")," to initialize multiple ",(0,o.kt)("inlineCode",{parentName:"li"},"Mapper")," with ",(0,o.kt)("inlineCode",{parentName:"li"},"AutomapperModule.forRoot()")),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"@InjectMapper()")," to inject the ",(0,o.kt)("inlineCode",{parentName:"li"},"Mapper")," in NestJS's ",(0,o.kt)("inlineCode",{parentName:"li"},"Injectable"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"@InjectMapper()")," accepts an optional argument ",(0,o.kt)("inlineCode",{parentName:"li"},"name"),". This is the name of the ",(0,o.kt)("inlineCode",{parentName:"li"},"CreateMapperOptions")," passed to ",(0,o.kt)("inlineCode",{parentName:"li"},"AutomapperModule.forRoot()")),(0,o.kt)("li",{parentName:"ul"},"When ",(0,o.kt)("inlineCode",{parentName:"li"},"singular")," is ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"@InjectMapper()")," will inject the ",(0,o.kt)("strong",{parentName:"li"},"default")," single ",(0,o.kt)("inlineCode",{parentName:"li"},"Mapper")," initialized."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AutomapperModule")," is a ",(0,o.kt)("inlineCode",{parentName:"li"},"Global")," module, so it is only needed to be imported once to have the ",(0,o.kt)("inlineCode",{parentName:"li"},"Mapper")," available across the application")),(0,o.kt)("h3",{id:"singular"},(0,o.kt)("inlineCode",{parentName:"h3"},"singular")),(0,o.kt)("p",null,"The main difference is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// without singular\n\n@Module({\n  imports: [\n    AutomapperModule.forRoot({\n      options: [{ name: 'blah', pluginInitializer: classes }],\n    }),\n  ],\n})\nexport class AppModule {}\n\n@Injectable()\nexport class Service {\n  // have to pass in the name of the mapper to InjectMapper\n  constructor(@InjectMapper('blah') private blahMapper: Mapper) {}\n}\n\n// with singular\n\n@Module({\n  imports: [\n    AutomapperModule.forRoot({\n      options: [{ name: 'blah', pluginInitializer: classes }],\n      singular: true,\n    }),\n  ],\n})\nexport class AppModule {}\n\n@Injectable()\nexport class Service {\n  // do not have to pass in the name of the mapper to InjectMapper\n  constructor(@InjectMapper() private blahMapper: Mapper) {}\n}\n")),(0,o.kt)("h2",{id:"profile"},"Profile"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Profile")," is just another ",(0,o.kt)("inlineCode",{parentName:"p"},"Injectable")," in NestJS. Make sure to ",(0,o.kt)("inlineCode",{parentName:"p"},"extends AutomapperProfile")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { AutomapperProfile } from '@automapper/nestjs';\nimport type { Mapper } from '@automapper/types';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UserProfile extends AutomapperProfile {\n  constructor(@InjectMapper() mapper: Mapper) {\n    super(mapper);\n  }\n\n  mapProfile() {\n    return (mapper) => {\n      mapper.createMap(User, UserDto);\n    };\n  }\n}\n")),(0,o.kt)("p",null,"Then provide ",(0,o.kt)("inlineCode",{parentName:"p"},"UserProfile")," in a ",(0,o.kt)("inlineCode",{parentName:"p"},"Module")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Module({\n  providers: [UserProfile],\n})\nexport class UserModule {}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AutomapperProfile")," enforces the sub-classes to implement a ",(0,o.kt)("inlineCode",{parentName:"li"},"mapProfile()")," method that will return a ",(0,o.kt)("inlineCode",{parentName:"li"},"MappingProfile"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Profile")," can have other Services injected to its constructor if needed.")),(0,o.kt)("h2",{id:"mapinterceptor"},(0,o.kt)("inlineCode",{parentName:"h2"},"MapInterceptor")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/nestjs")," provides ",(0,o.kt)("inlineCode",{parentName:"p"},"MapInterceptor"),". In cases where you do not care about annotating the correct return type for a ",(0,o.kt)("strong",{parentName:"p"},"Controller#method")," and want your ",(0,o.kt)("strong",{parentName:"p"},"Service")," to be a little cleaner, you can utilize the ",(0,o.kt)("inlineCode",{parentName:"p"},"MapInterceptor")," to execute the mapping."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { MapInterceptor } from '@automapper/nestjs';\n\nexport class UserController {\n  @Get('me')\n  @UseInterceptors(MapInterceptor(UserDto, User))\n  me() {\n    // userService.getMe() returns a User here and does not have mapping logic in it.\n    return this.userService.getMe();\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MapInterceptor")," has the following signature:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"MapInterceptor(destinationModelType, sourceModelType, {\n  isArray?: boolean;\n  mapperName?: string;\n} & MapOptions)\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/misc/callbacks"},"MapOptions"))),(0,o.kt)("h2",{id:"mappipe"},(0,o.kt)("inlineCode",{parentName:"h2"},"MapPipe")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/nestjs")," provides ",(0,o.kt)("inlineCode",{parentName:"p"},"MapPipe"),". When you want to transform the incoming request body before it gets to the route handler, you can utilize ",(0,o.kt)("inlineCode",{parentName:"p"},"MapPipe")," to achieve this behavior"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Post('/from-body')\npostFromBody(@Body(MapPipe(UserDto, User)) user: UserDto) {\n    // from the request perspective, user coming in as an User object but will be mapped to UserDto with MapPipe\n    return user;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MapPipe")," only works with ",(0,o.kt)("inlineCode",{parentName:"p"},"@Body")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"@Query"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Get('/from-query')\ngetFromQuery(@Query(MapPipe(UserDto, User)) user: UserDto) {\n    // from the request perspective, user coming in as an User object but will be mapped to UserDto with MapPipe\n    return user;\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note that when you send a request with ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Query"),", the data is serialized. Data-type like ",(0,o.kt)("inlineCode",{parentName:"p"},"Date")," will come in the request handler as ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),". Hence, please be cautious of the mapping configuration when you use ",(0,o.kt)("inlineCode",{parentName:"p"},"MapPipe"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MapPipe")," has the same signature as ",(0,o.kt)("inlineCode",{parentName:"p"},"MapInterceptor")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"MapPipe(destinationModelType, sourceModelType, {\n  isArray?: boolean;\n  mapperName?: string;\n} & MapOptions)\n")))}u.isMDXComponent=!0}}]);