(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[953],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(g,p(p({ref:t},u),{},{components:n})):a.createElement(g,p({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,p=new Array(o);p[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var l=2;l<o;l++)p[l]=n[l];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6021:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return p},metadata:function(){return i},toc:function(){return s},default:function(){return u}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),p={id:"auto",title:"Auto in AutoMapper",sidebar_label:"Auto in AutoMapper"},i={unversionedId:"mapping-configuration/auto",id:"mapping-configuration/auto",isDocsHomePage:!1,title:"Auto in AutoMapper",description:"Matching properties",source:"@site/docs/mapping-configuration/auto.md",sourceDirName:"mapping-configuration",slug:"/mapping-configuration/auto",permalink:"/docs/mapping-configuration/auto",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/mapping-configuration/auto.md",version:"current",sidebar_label:"Auto in AutoMapper",frontMatter:{id:"auto",title:"Auto in AutoMapper",sidebar_label:"Auto in AutoMapper"},sidebar:"docs",previous:{title:"Fundamentals",permalink:"/docs/fundamentals"},next:{title:"Introduce to Custom Configuration",permalink:"/docs/mapping-configuration/introduce-to-custom-configuration"}},s=[{value:"Matching properties",id:"matching-properties",children:[]},{value:"Flattening",id:"flattening",children:[]},{value:"Extends other <code>Mapping</code>",id:"extends-other-mapping",children:[]},{value:"Arrays of objects",id:"arrays-of-objects",children:[]},{value:"Enums",id:"enums",children:[]},{value:"(<code>classes</code> only) Transformer Plugin",id:"classes-only-transformer-plugin",children:[]}],l={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"matching-properties"},"Matching properties"),(0,o.kt)("p",null,"We have already seen that matching properties are mapped automatically with the help of ",(0,o.kt)("inlineCode",{parentName:"p"},"@AutoMap()")," decorator (with ",(0,o.kt)("inlineCode",{parentName:"p"},"classes")," plugin)"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/pojos"),", there is a different approach.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Foo {\n  @AutoMap()\n  foo: string;\n}\n\nclass FooDto {\n  @AutoMap()\n  foo: string;\n}\n")),(0,o.kt)("h2",{id:"flattening"},"Flattening"),(0,o.kt)("p",null,"Flattening is only applied when ",(0,o.kt)("inlineCode",{parentName:"p"},"namingConventions")," is set either on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapping")," or globally."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Bar {\n  @AutoMap()\n  baz: string;\n}\n\nclass Foo {\n  @AutoMap()\n  foo: string;\n  @AutoMap({ typeFn: () => Bar })\n  bar: Bar;\n}\n\nclass FooDto {\n  @AutoMap()\n  foo: string;\n  @AutoMap()\n  barBaz: string;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Matching Properties")," and ",(0,o.kt)("strong",{parentName:"p"},"Flattening")," are to encourage the consumers to structure their data models in a coherent way, so they can get the most out of an AutoMapper."),(0,o.kt)("h2",{id:"extends-other-mapping"},"Extends other ",(0,o.kt)("inlineCode",{parentName:"h2"},"Mapping")),(0,o.kt)("p",null,"When invoking ",(0,o.kt)("inlineCode",{parentName:"p"},"mapper.createMap()"),", we've already seen how we can pass ",(0,o.kt)("inlineCode",{parentName:"p"},"namingConventions")," to the 3rd argument, ",(0,o.kt)("inlineCode",{parentName:"p"},"CreateMapOptions"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"CreateMapOptions")," also accepts a property called ",(0,o.kt)("inlineCode",{parentName:"p"},"extends: Mapping[]"),"."),(0,o.kt)("p",null,"This is typed very loosely so make sure to align the models properly when utilizing this feature. ",(0,o.kt)("inlineCode",{parentName:"p"},"extends")," will instruct ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapper")," to merge the existing configurations of the other ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapping")," with the mapping configuration it's trying to create upon initialization."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Base {\n  @AutoMap()\n  base: string;\n}\n\nclass BaseDto {\n  @AutoMap()\n  base: string;\n}\n\nclass Foo extends Base {\n  @AutoMap()\n  foo: string;\n}\n\nclass FooDto extends BaseDto {\n  @AutoMap()\n  foo: string;\n}\n\nmapper.createMap(Base, BaseDto);\nmapper.createMap(Foo, FooDto, { extends: [mapper.getMapping(Base, BaseDto)] });\n")),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapper")," executes the mapping operation from ",(0,o.kt)("inlineCode",{parentName:"p"},"Foo")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"FooDto"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"base")," property will also be mapped correctly based on ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapping<Base, BaseDto>")),(0,o.kt)("p",null,"Custom configuration can still override the merged configuration from ",(0,o.kt)("inlineCode",{parentName:"p"},"extends")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { mapFrom } from '@automapper/core';\n\nmapper\n  .createMap(Foo, FooDto, { extends: [mapper.getMapping(Base, BaseDto)] })\n  .forMember(\n    (destination) => destination.base,\n    mapFrom((source) => source.foo)\n  );\n")),(0,o.kt)("p",null,"Now, ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapper")," will map ",(0,o.kt)("inlineCode",{parentName:"p"},"base")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"source.foo")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"source.base")," when it executes the mapping operation from ",(0,o.kt)("inlineCode",{parentName:"p"},"Foo")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"FooDto"),"."),(0,o.kt)("h2",{id:"arrays-of-objects"},"Arrays of objects"),(0,o.kt)("p",null,"Arrays of objects are ",(0,o.kt)("strong",{parentName:"p"},"auto-mapped")," if they also follow convention. Assume the following case:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class Address {\n  @AutoMap()\n  street: string;\n  @AutoMap()\n  city: string;\n  @AutoMap()\n  state: string;\n}\n\nexport class User {\n  @AutoMap({ typeFn: () => Address })\n  addresses: Address[];\n}\n\nexport class AddressDto {\n  @AutoMap()\n  formattedAddress: string;\n}\n\nexport class UserDto {\n  @AutoMap({ typeFn: () => AddressDto })\n  addresses: AddressDto[];\n}\n")),(0,o.kt)("p",null,"Notice that ",(0,o.kt)("inlineCode",{parentName:"p"},"User#addresses")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"UserDto#addresses")," are ",(0,o.kt)("strong",{parentName:"p"},"conventionally matching"),". If we provide the metadata (with ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoMap")," like above) and create the respective ",(0,o.kt)("inlineCode",{parentName:"p"},"Mapping"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/*")," should be able to ",(0,o.kt)("strong",{parentName:"p"},"automatically")," map ",(0,o.kt)("inlineCode",{parentName:"p"},"User#addresses")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"Address[]")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"UserDto#addresses")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"AddressDto[]")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"mapper.createMap(Address, AddressDto).forMember(\n  (d) => d.formattedAddress,\n  mapFrom((s) => s.street + ' ' + s.city + ' ' + s.state)\n);\n\nmapper.createMap(User, UserDto);\n")),(0,o.kt)("p",null,"Check out this ",(0,o.kt)("a",{parentName:"p",href:"https://stackblitz.com/edit/typescript-automapper-jlxuv8"},"Stackblitz")," for usage with ",(0,o.kt)("inlineCode",{parentName:"p"},"pojos")),(0,o.kt)("h2",{id:"enums"},"Enums"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/*")," does not care about Enum type because ultimately the value type of these enum properties are either ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"number"),". To work with enums, please provide ",(0,o.kt)("inlineCode",{parentName:"p"},"String")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Number")," to your enum properties. This applies to both ",(0,o.kt)("inlineCode",{parentName:"p"},"classes")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"pojos")," plugins"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// classes\n\nexport enum UserRole {\n  Admin = 'admin',\n  User = 'user',\n}\n\nexport class User {\n  @AutoMap({ typeFn: () => String }) // because UserRole is a string enum\n  role: UserRole;\n}\n\n// pojos\n\nexport interface User {\n  role: UserRole;\n}\n\ncreateMetadataMap<User>('User', {\n  role: String, // because UserRole is a string enum\n});\n")),(0,o.kt)("h2",{id:"classes-only-transformer-plugin"},"(",(0,o.kt)("inlineCode",{parentName:"h2"},"classes")," only) Transformer Plugin"),(0,o.kt)("p",null,"Verbosity with ",(0,o.kt)("inlineCode",{parentName:"p"},"@AutoMap()")," cannot be denied. If you're feeling adventurous, take a look at ",(0,o.kt)("a",{parentName:"p",href:"/docs/plugins-system/classes-transformer-plugin"},"Transformer Plugin")," to learn how to alleviate the boiler-plate pain point."))}u.isMDXComponent=!0}}]);