(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[76],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5862:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p},default:function(){return c}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i={id:"introduce-to-pojos",title:"Introduction",sidebar_label:"Introduction"},s={unversionedId:"plugins-system/introduce-to-pojos",id:"plugins-system/introduce-to-pojos",isDocsHomePage:!1,title:"Introduction",description:"@automapper/pojos is one of the official plugins of @automapper/* monorepo. @automapper/pojos works with plain objects along with their Interfaces/Types.",source:"@site/docs/plugins-system/introduce-to-pojos.md",sourceDirName:"plugins-system",slug:"/plugins-system/introduce-to-pojos",permalink:"/docs/plugins-system/introduce-to-pojos",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/plugins-system/introduce-to-pojos.md",version:"current",sidebar_label:"Introduction",frontMatter:{id:"introduce-to-pojos",title:"Introduction",sidebar_label:"Introduction"},sidebar:"docs",previous:{title:"@automapper/classes/mapped-types",permalink:"/docs/plugins-system/classes-mapped-types"},next:{title:"Metadata",permalink:"/docs/plugins-system/pojos-metadata"}},p=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[]}],l={toc:p};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/pojos")," is one of the official plugins of ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/*")," monorepo. ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/pojos")," works with plain objects along with their Interfaces/Types."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @automapper/pojos\n# or with yarn\nyarn add @automapper/pojos\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"The only differences between ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/pojos")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@automapper/classes")," are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"createMetadataMap")," to store metadata instead of ",(0,o.kt)("inlineCode",{parentName:"li"},"@AutoMap()")," decorator. See ",(0,o.kt)("a",{parentName:"li",href:"/docs/plugins-system/pojos-metadata"},"createMetadataMap")),(0,o.kt)("li",{parentName:"ul"},"Use unique ",(0,o.kt)("inlineCode",{parentName:"li"},"string")," as ",(0,o.kt)("inlineCode",{parentName:"li"},"metaKey")," instead of class constructor (eg: ",(0,o.kt)("inlineCode",{parentName:"li"},'"User"')," vs ",(0,o.kt)("inlineCode",{parentName:"li"},"User"),")")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createMetadataMap } from '@automapper/pojos';\n\nexport interface User {\n  firstName: string;\n  lastName: string;\n  username: string;\n  password: string;\n  bio: Bio;\n}\n\nexport interface Bio {\n  job: Job;\n  birthday: Date;\n  avatarUrl: string;\n}\n\nexport interface Job {\n  title: string;\n  salary: number;\n}\n\nexport interface UserDto {\n  firstName: string;\n  lastName: string;\n  fullName: string;\n  username: string;\n  bio: BioDto;\n}\n\nexport interface BioDto {\n  jobTitle: string;\n  jobSalary: number;\n  birthday: string;\n  avatarUrl: string;\n}\n\ncreateMetadataMap<Job>('Job', {\n  title: String,\n  salary: Number,\n});\n\ncreateMetadataMap<Bio>('Bio', {\n  job: 'Job',\n  avatarUrl: String,\n});\n\ncreateMetadataMap<User>('User', {\n  firstName: String,\n  lastName: String,\n  username: String,\n  bio: 'Bio',\n});\n\ncreateMetadataMap<BioDto>('BioDto', {\n  jobTitle: String,\n  jobSalary: String,\n  avatarUrl: String,\n});\n\ncreateMetadataMap<UserDto>('UserDto', 'User', {\n  fullName: String,\n  bio: 'BioDto',\n});\n\nmapper\n  .createMap<Bio, BioDto>('Bio', 'BioDto', {\n    namingConventions: {\n      source: new CamelCaseNamingConvention(),\n      destination: new CamelCaseNamingConvention(),\n    },\n  })\n  .forMember(\n    (destination) => destination.birthday,\n    mapFrom((source) => source.birthday.toDateString())\n  );\n\nmapper.createMap<User, UserDto>('User', 'UserDto').forMember(\n  (destination) => destination.fullName,\n  mapFrom((source) => source.firstName + ' ' + source.lastName)\n);\n\nfunction getUserDto(username: string): UserDto {\n  const user = fetchUserByUsernameFromDb(username);\n  return mapper.map<User, UserDto>(user, 'UserDto', 'User');\n}\n")))}c.isMDXComponent=!0}}]);