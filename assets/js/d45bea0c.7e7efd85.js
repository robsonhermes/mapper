(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[995],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,k=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return t?a.createElement(k,o(o({ref:n},s),{},{components:t})):a.createElement(k,o({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5424:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return l},default:function(){return s}});var a=t(2122),r=t(9756),i=(t(7294),t(3905)),o={id:"callbacks",title:"Callbacks",sidebar_label:"Callbacks"},p={unversionedId:"misc/callbacks",id:"misc/callbacks",isDocsHomePage:!1,title:"Callbacks",description:"@automapper/core allows for passing in beforeMap and afterMap which will be executed before and/or after a mapping operation. In AutoMapper, these are called MapAction",source:"@site/docs/misc/callbacks.md",sourceDirName:"misc",slug:"/misc/callbacks",permalink:"/docs/misc/callbacks",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/misc/callbacks.md",version:"current",sidebar_label:"Callbacks",frontMatter:{id:"callbacks",title:"Callbacks",sidebar_label:"Callbacks"},sidebar:"docs",previous:{title:"PreCondition",permalink:"/docs/mapping-configuration/pre-condition"},next:{title:"Map Mutation",permalink:"/docs/misc/map-mutate"}},l=[{value:"<code>Map</code> actions",id:"map-actions",children:[]},{value:"<code>Mapping</code> actions",id:"mapping-actions",children:[]},{value:"Async actions",id:"async-actions",children:[]},{value:"Author note",id:"author-note",children:[]}],c={toc:l};function s(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@automapper/core")," allows for passing in ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeMap")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"afterMap")," which will be executed ",(0,i.kt)("strong",{parentName:"p"},"before")," and/or ",(0,i.kt)("strong",{parentName:"p"},"after")," a mapping operation. In AutoMapper, these are called ",(0,i.kt)("inlineCode",{parentName:"p"},"MapAction")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MapAction")," can be provided at two different levels: ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapping")," level and ",(0,i.kt)("inlineCode",{parentName:"p"},"Map")," level."),(0,i.kt)("h2",{id:"map-actions"},(0,i.kt)("inlineCode",{parentName:"h2"},"Map")," actions"),(0,i.kt)("p",null,"All ",(0,i.kt)("inlineCode",{parentName:"p"},"map()")," variations accept optional ",(0,i.kt)("inlineCode",{parentName:"p"},"MapOptions")," which is an object with the following interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export interface MapOptions<\n  TSource extends Dictionary<TSource> = unknown,\n  TDestination extends Dictionary<TDestination> = unknown\n> {\n  beforeMap?: MapAction<TSource, TDestination>;\n  afterMap?: MapAction<TSource, TDestination>;\n  extraArguments?: Record<string, unknown>; // <-- to be used with mapWithArguments()\n}\n")),(0,i.kt)("p",null,"If any of the ",(0,i.kt)("inlineCode",{parentName:"p"},"MapAction")," is provided, it will be called in correct chronological order"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"mapper.map(user, UserDto, User, {\n  beforeMap: (source, destination) => {},\n  afterMap: (source, destination) => {},\n});\n")),(0,i.kt)("h2",{id:"mapping-actions"},(0,i.kt)("inlineCode",{parentName:"h2"},"Mapping")," actions"),(0,i.kt)("p",null,"When we call ",(0,i.kt)("inlineCode",{parentName:"p"},"mapper.createMap()"),", we can chain ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeMap")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"afterMap")," to provide ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapping")," actions. These actions will be called for ",(0,i.kt)("strong",{parentName:"p"},"ALL")," mapping operations between a ",(0,i.kt)("strong",{parentName:"p"},"Source")," and a ",(0,i.kt)("strong",{parentName:"p"},"Destination"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"mapper\n  .createMap(User, UserDto)\n  .beforeMap((source, destination) => {})\n  .afterMap((source, destination) => {});\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Map")," actions will ",(0,i.kt)("strong",{parentName:"p"},"override")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapping")," actions."),(0,i.kt)("h2",{id:"async-actions"},"Async actions"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MapAction")," is useful when we're dealing with Asynchronous values. If we want to map an async ",(0,i.kt)("strong",{parentName:"p"},"Source#member")," to a sync ",(0,i.kt)("strong",{parentName:"p"},"Destination#member"),", the appropriate way to do so is:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ignore()")," ",(0,i.kt)("strong",{parentName:"li"},"Destination#member")),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"afterMap(async () => {})")," syntax to await for ",(0,i.kt)("strong",{parentName:"li"},"Source#member")," then either assign the resolved value to ",(0,i.kt)("strong",{parentName:"li"},"Destination#member")," directly or call ",(0,i.kt)("inlineCode",{parentName:"li"},"mapper.map()")," with the resolved value.")),(0,i.kt)("h2",{id:"author-note"},"Author note"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The arguments passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"MapAction")," are mutable. ",(0,i.kt)("strong",{parentName:"li"},"Do not")," mutate anything unless you're sure what you are doing."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mapArray()")," will ",(0,i.kt)("strong",{parentName:"li"},"ignore")," ",(0,i.kt)("inlineCode",{parentName:"li"},"Mapping")," actions due to performance issue. It would not be performant if we have a ",(0,i.kt)("inlineCode",{parentName:"li"},"MapAction")," on ",(0,i.kt)("inlineCode",{parentName:"li"},"User <> UserDto")," and we run the ",(0,i.kt)("inlineCode",{parentName:"li"},"MapAction")," for every single item when we ",(0,i.kt)("inlineCode",{parentName:"li"},"mapArray()")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"Array<UserDto>")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"Array<User>"))))}s.isMDXComponent=!0}}]);