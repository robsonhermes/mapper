(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[767],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=r.createContext({}),s=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),f=o,d=u["".concat(m,".").concat(f)]||u[f]||l[f]||a;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6510:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return m},default:function(){return c}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i={id:"map-from",title:"MapFrom",sidebar_label:"MapFrom"},p={unversionedId:"mapping-configuration/map-from",id:"mapping-configuration/map-from",isDocsHomePage:!1,title:"MapFrom",description:"We've already seen mapFrom() throughout some early sections of the documentations.",source:"@site/docs/mapping-configuration/map-from.md",sourceDirName:"mapping-configuration",slug:"/mapping-configuration/map-from",permalink:"/docs/mapping-configuration/map-from",editUrl:"https://github.com/nartc/mapper/tree/main/docs-site/docs/mapping-configuration/map-from.md",version:"current",sidebar_label:"MapFrom",frontMatter:{id:"map-from",title:"MapFrom",sidebar_label:"MapFrom"},sidebar:"docs",previous:{title:"Introduce to Custom Configuration",permalink:"/docs/mapping-configuration/introduce-to-custom-configuration"},next:{title:"Condition",permalink:"/docs/mapping-configuration/condition"}},m=[{value:"Custom value from <strong>Source</strong>",id:"custom-value-from-source",children:[]},{value:"Value Resolver",id:"value-resolver",children:[]}],s={toc:m};function c(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We've already seen ",(0,a.kt)("inlineCode",{parentName:"p"},"mapFrom()")," throughout some early sections of the documentations."),(0,a.kt)("h2",{id:"custom-value-from-source"},"Custom value from ",(0,a.kt)("strong",{parentName:"h2"},"Source")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mapFrom()")," accepts a ",(0,a.kt)("strong",{parentName:"p"},"Selector")," that we will select a member from ",(0,a.kt)("strong",{parentName:"p"},"Source")," to map to the member we're configuring on ",(0,a.kt)("strong",{parentName:"p"},"Destination")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { mapFrom } from '@automapper/core';\n\nmapper\n  .createMap(User, UserDto)\n  .forMember(\n    (destination) => destination.fullName,\n    mapFrom((source) => source.firstName + ' ' + source.lastName)\n  )\n  .forMember(\n    (destination) => destination.isAdult,\n    mapFrom((source) => source.age >= 18)\n  );\n")),(0,a.kt)("h2",{id:"value-resolver"},"Value Resolver"),(0,a.kt)("p",null,"A less-common use-case of ",(0,a.kt)("inlineCode",{parentName:"p"},"mapFrom()")," is to utilize Value Resolver which is an object with the shape of ",(0,a.kt)("inlineCode",{parentName:"p"},"Resolver")," interface."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface Resolver<\n  TSource extends Dictionary<TSource> = unknown,\n  TDestination extends Dictionary<TDestination> = unknown,\n  TResolvedType = SelectorReturn<TDestination>\n> {\n  resolve(source: TSource, destination?: TDestination): TResolvedType;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"resolve()")," method accepts the whole ",(0,a.kt)("strong",{parentName:"p"},"Source")," object being mapped, an optional ",(0,a.kt)("strong",{parentName:"p"},"Destination")," object being mapped, and returns a value that ultimately will be mapped to the member on ",(0,a.kt)("strong",{parentName:"p"},"Destination")," that we are configuring."),(0,a.kt)("p",null,"Value Resolver is to help with complex logic where you need to determine what to return for the member on ",(0,a.kt)("strong",{parentName:"p"},"Destination")," without having to pollute your ",(0,a.kt)("inlineCode",{parentName:"p"},"Profile"),". You can have ",(0,a.kt)("inlineCode",{parentName:"p"},"Resolver")," in separate files."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { mapFrom } from '@automapper/core';\nimport type { Resolver } from '@automapper/types';\n\nexport const taxResolver: Resolver<Item, ItemDto, number> = {\n  resolve(source) {\n    return source.type === 'A' ? source.price * 0.5 : source.price * 0.9;\n  },\n};\n\nmapper\n  .createMap(Item, ItemDto)\n  .forMember((destination) => destination.tax, mapFrom(taxResolver));\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mapFrom()")," will set the ",(0,a.kt)("inlineCode",{parentName:"p"},"TransformationType")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"TransformationType.MapFrom")))}c.isMDXComponent=!0}}]);